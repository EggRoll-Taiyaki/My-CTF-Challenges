

# This file was *autogenerated* from the file ../healthcheck/solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_64 = Integer(64); _sage_const_8 = Integer(8); _sage_const_2 = Integer(2); _sage_const_2023 = Integer(2023); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_2038 = Integer(2038); _sage_const_16 = Integer(16)
from pwn import *
from Crypto.Util.number import *

server = process("./server.py")
# server = remote("127.0.0.1", 1337)

k = _sage_const_64 
l = _sage_const_8 

"""
	Retrieve the parameters
"""
server.recvuntil(b"a = ")
a = int(server.recvline().decode().strip())
server.recvuntil(b"b = ")
b = int(server.recvline().decode().strip())
m = _sage_const_2 **(_sage_const_2 *k)
"""
	Get and store the outputs
"""
out = [int(server.recvline().decode().strip()) for _ in range(_sage_const_2023 )]

"""
	
"""
def solve_LCG(a, m, approx):

	n = len(approx)
	M = Matrix(ZZ, n, n)
	for i in range(_sage_const_1 , n):
		M[i, i] = -_sage_const_1 
		M[i, _sage_const_0 ] = a**i
	M[_sage_const_0 , _sage_const_0 ] = m
	
	L = M.LLL()

	v = vector([x for x in approx])
	lower_bits = L.solve_right(vector([round(RR(x)/m) * m - x for x in L * v]))

	return list(v + lower_bits)

"""
	
"""
mm = _sage_const_2 **(k + l)
mmm = _sage_const_2 **k
for period in range(k+_sage_const_1 , _sage_const_2038  // _sage_const_16 ):

	if isPrime(period):
		continue

	A = pow(a, period, mm)
	for guess in range(_sage_const_2 **l):
		LSB = [int(pow(A, i, _sage_const_2 **l)) * guess % _sage_const_2 **l for i in range(_sage_const_16 )]
		MSB = [(LSB[i] ^ (out[i * period] % _sage_const_2 **l)) << k for i in range(_sage_const_16 )]
		recover = solve_LCG(A, mm, MSB)
	
		right = int(recover[_sage_const_0 ])
		right %= mmm
		left = out[_sage_const_0 ] ^ right
		_seed = int(pow(a, -_sage_const_1 , m)) * ((left << k) + right) % m
	
		check = True
		state = _seed
		for i in range(_sage_const_2023 ):
			state = a * state % m
			
			if bin((state >> k) ^ (state % mmm)).count("1") % _sage_const_2  != bin(out[i]).count("1") % _sage_const_2 :
				check = False
				break

		if check:
			server.sendlineafter(b"Guess the seed: ", str(_seed).encode())
			print(server.recvline().decode())
			exit()				

	print(period)

